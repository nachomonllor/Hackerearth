https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/practice-problems/algorithm/perfect-pair-df920e90/description/


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ConsoleApp1
{
    class Program
    {


        static int PerfectPairs(int[] arr, HashSet<int> hash)
        {

            Dictionary<int, int> frec = new Dictionary<int, int>();

            for (int i = 0; i < arr.Length; i++)
            {
                if (frec.ContainsKey(arr[i])) frec[arr[i]]++;
                else frec[arr[i]] = 1;
            }

            //HashSet<int> hash = new HashSet<int>();

            //for (int i = 1; i <= arr.Max(); i++)
            //{
            //    hash.Add(i * i);
            //    hash.Add(i * i * i);
            //}

            HashSet<int> arr_hash = new HashSet<int>(arr);


            int ans = 0;


            //HashSet<string > res = new HashSet<string  >();
            // for (int i = 0; i < arr_hash.Count; i++)
            HashSet<string> distintos = new HashSet<string>();

            foreach (int item_arr in arr_hash)
            {
                foreach (int item in hash)
                {
                    if (arr_hash.Contains(item - item_arr))
                    {
                        //res.Add( (item - arr[i]) + " " + arr[i]  );

                        int min = Math.Min((item - item_arr), item_arr);
                        int max = Math.Max((item - item_arr), item_arr);

                        if (distintos.Add(min + " " + max))
                        {

                            if (min != max)
                            {
                                ans += frec[min] * frec[max];
                            }
                            else
                            {
                                ans += (frec[min] * (frec[min] - 1)) / 2;
                            }
                        }
                    }
                }
            }

            return ans;
        }

        static void Main(string[] args)
        {

            int[] cc = { 1, 4, 8, 9, 16, 25, 27, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375 };
            HashSet<int> cuad_cub = new HashSet<int>(cc);

            //1 2 3 4 5   (1, 3)=4, (3, 5)=8 and (4,5)=9 
            int t = int.Parse(Console.ReadLine());
            StringBuilder sb = new StringBuilder();
            while (t-- > 0)
            {
                int n = int.Parse(Console.ReadLine());
                int[] arr = Array.ConvertAll(Console.ReadLine().Trim().Split(' '), e => int.Parse(e));
                sb.Append (PerfectPairs(arr, cuad_cub));
                sb.AppendLine();
                
            }
            Console.WriteLine(sb.ToString());

            Console.ReadLine();
        }


       

    }
}